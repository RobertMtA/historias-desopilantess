/**
 * Script para crear tablas directamente en Railway
 * Ejecutar usando: railway service exec <service-id> "node create-tables-direct.js"
 */

// Configuraci√≥n
const config = {
  user: 'postgres',
  password: process.env.POSTGRES_PASSWORD,
  host: 'localhost', // Acceso local dentro de Railway
  port: 5432,
  database: 'railway'
};

console.log('üîç Script para crear tablas en PostgreSQL');
console.log('‚è±Ô∏è Fecha y hora:', new Date().toISOString());
console.log('üì¶ Configuraci√≥n:', {
  user: config.user,
  host: config.host,
  port: config.port,
  database: config.database,
  password: '********' // No mostrar la contrase√±a en los logs
});

// Importar m√≥dulos
const { Client } = require('pg');

// Crear cliente de conexi√≥n
const client = new Client(config);

// Funci√≥n principal
async function createTables() {
  try {
    // Conectar a la base de datos
    console.log('üîå Conectando a PostgreSQL...');
    await client.connect();
    console.log('‚úÖ Conexi√≥n establecida');

    // Crear tablas
    console.log('üìù Creando tablas...');
    
    // Tabla historias
    console.log('üìä Creando tabla historias...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS historias (
        id SERIAL PRIMARY KEY,
        titulo VARCHAR(255) NOT NULL,
        contenido TEXT NOT NULL,
        autor VARCHAR(100),
        categoria VARCHAR(50),
        fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Tabla historias creada');
    
    // Tabla comentarios
    console.log('üìä Creando tabla comentarios...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS comentarios (
        id SERIAL PRIMARY KEY,
        historia_id INTEGER NOT NULL,
        autor VARCHAR(100) NOT NULL,
        contenido TEXT NOT NULL,
        fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Tabla comentarios creada');
    
    // Tabla story_interactions
    console.log('üìä Creando tabla story_interactions...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS story_interactions (
        id SERIAL PRIMARY KEY,
        historia_id INTEGER NOT NULL UNIQUE,
        likes INTEGER DEFAULT 0,
        views INTEGER DEFAULT 0
      )
    `);
    console.log('‚úÖ Tabla story_interactions creada');
    
    // Verificar datos de ejemplo
    console.log('üîç Verificando si existen historias...');
    const result = await client.query('SELECT COUNT(*) FROM historias');
    const count = parseInt(result.rows[0].count);
    console.log(`‚ÑπÔ∏è Encontradas ${count} historias en la base de datos`);
    
    // Insertar datos de ejemplo si no hay
    if (count === 0) {
      console.log('üìù Insertando historias de ejemplo...');
      await client.query(`
        INSERT INTO historias (titulo, contenido, autor, categoria)
        VALUES 
        ('La Aventura Inesperada', 'Era una tarde lluviosa cuando decid√≠ salir a caminar sin paraguas. Lo que parec√≠a ser un error, termin√≥ convirti√©ndose en la mejor decisi√≥n de mi vida...', 'Juan P√©rez', 'Comedia'),
        ('El Misterio del Bosque', 'Nadie sab√≠a qu√© ocurr√≠a en aquel bosque por las noches. Los habitantes del pueblo evitaban acercarse despu√©s del atardecer, hasta que un d√≠a, decid√≠ investigar por mi cuenta...', 'Mar√≠a Garc√≠a', 'Misterio'),
        ('Un D√≠a Cualquiera', 'Lo que parec√≠a un d√≠a normal se convirti√≥ en algo extraordinario cuando al abrir la puerta de mi casa encontr√© un sobre amarillo con mi nombre escrito con una caligraf√≠a perfecta...', 'Carlos Rodr√≠guez', 'Cotidiano')
      `);
      console.log('‚úÖ Historias de ejemplo insertadas');
    }
    
    console.log('üéâ Todas las tablas han sido creadas correctamente');
  } catch (error) {
    console.error('‚ùå Error al crear tablas:', error);
  } finally {
    // Cerrar conexi√≥n
    await client.end();
    console.log('üëã Conexi√≥n cerrada');
  }
}

// Ejecutar funci√≥n
createTables()
  .then(() => {
    console.log('‚úÖ Script completado con √©xito');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå Error general:', error);
    process.exit(1);
  });
