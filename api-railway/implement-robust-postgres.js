/**
 * SCRIPT DE IMPLEMENTACI√ìN DE LA SOLUCI√ìN DEFINITIVA PARA POSTGRES
 * 
 * Este script integra la conexi√≥n robusta a PostgreSQL
 * en el servidor de Railway.
 */

const fs = require('fs');
const path = require('path');

// Rutas de archivos
const serverPath = path.join(__dirname, 'server.js');
const backupPath = path.join(__dirname, 'server.js.backup-' + Date.now());
const robustPgPath = path.join(__dirname, 'lib/robust-postgres.js');

// Verificar que el archivo de conexi√≥n robusta existe
if (!fs.existsSync(robustPgPath)) {
  console.error('‚ùå Error: El archivo lib/robust-postgres.js no existe');
  process.exit(1);
}

// Leer archivo de servidor
console.log('üìÇ Leyendo archivo server.js...');
let serverContent = '';
try {
  serverContent = fs.readFileSync(serverPath, 'utf8');
  
  // Hacer copia de seguridad
  console.log('üíæ Creando copia de seguridad del servidor...');
  fs.writeFileSync(backupPath, serverContent, 'utf8');
  console.log(`‚úÖ Copia de seguridad creada en: ${backupPath}`);
  
} catch (error) {
  console.error(`‚ùå Error al leer server.js: ${error.message}`);
  process.exit(1);
}

// Identificar la secci√≥n de c√≥digo a reemplazar
const oldConnectionCode = /\/\/ Configuraci√≥n de PostgreSQL[\s\S]*?try \{[\s\S]*?pool\.connect\(\(err, client, release\) => \{[\s\S]*?\}\);[\s\S]*?\} catch \(error\) \{[\s\S]*?\};/;

// Nuevo c√≥digo para la conexi√≥n robusta
const newConnectionCode = `// Configuraci√≥n de PostgreSQL con manejo robusto de errores
const { createRobustPostgresConnection } = require('./lib/robust-postgres');

// Cargar logo desde archivo (si existe)
let logoBase64 = '';
try {
  const logoPath = path.join(__dirname, 'logo.txt');
  if (fs.existsSync(logoPath)) {
    logoBase64 = fs.readFileSync(logoPath, 'utf8');
    console.log('‚úÖ Logo cargado desde archivo');
  }
} catch (error) {
  console.warn('‚ö†Ô∏è No se pudo cargar el logo:', error.message);
}

// Crear conexi√≥n robusta a PostgreSQL
const dbConnection = createRobustPostgresConnection({
  // La URL de conexi√≥n se toma autom√°ticamente de process.env.DATABASE_URL
  maxRetries: 5,
  retryDelay: 5000,
  logPrefix: 'üìä [PostgreSQL]',
  // Datos iniciales para modo simulado
  mockData: {
    likes: {},
    comments: []
  }
});

// Obtener el pool para usar en el resto del c√≥digo
const pool = dbConnection.pool;`;

// Reemplazar el c√≥digo de conexi√≥n
console.log('üîÑ Reemplazando c√≥digo de conexi√≥n a PostgreSQL...');
const updatedServerContent = serverContent.replace(oldConnectionCode, newConnectionCode);

if (updatedServerContent === serverContent) {
  console.warn('‚ö†Ô∏è No se pudo encontrar el c√≥digo de conexi√≥n para reemplazar');
  console.log('‚öôÔ∏è Intentando una estrategia alternativa...');
  
  // Estrategia alternativa: buscar secciones espec√≠ficas
  const importSection = /const express = require\('express'\);[\s\S]*?const PORT = process\.env\.PORT \|\| \d+;/;
  const poolDeclaration = /let pool;[\s\S]*?try \{[\s\S]*?pool = new Pool\(\{[\s\S]*?\}\);/;
  
  // Reemplazar las secciones espec√≠ficas
  let altUpdatedContent = serverContent;
  
  // A√±adir el require para path y fs
  if (!altUpdatedContent.includes("const path = require('path');")) {
    altUpdatedContent = altUpdatedContent.replace(
      "const express = require('express');",
      "const express = require('express');\nconst path = require('path');\nconst fs = require('fs');"
    );
  }
  
  // Reemplazar la declaraci√≥n del pool
  if (altUpdatedContent.includes('let pool;')) {
    altUpdatedContent = altUpdatedContent.replace(
      'let pool;',
      newConnectionCode
    );
    
    // Eliminar el bloque try-catch original si existe
    altUpdatedContent = altUpdatedContent.replace(
      /try \{[\s\S]*?console\.log\('üìä Configurando conexi√≥n PostgreSQL[\s\S]*?pool = \{[\s\S]*?\};[\s\S]*?\}/,
      ''
    );
    
    console.log('‚úÖ C√≥digo de conexi√≥n reemplazado con estrategia alternativa');
    fs.writeFileSync(serverPath, altUpdatedContent, 'utf8');
  } else {
    console.error('‚ùå No se pudo implementar la soluci√≥n autom√°ticamente');
    console.log('Por favor, integra manualmente el c√≥digo de conexi√≥n robusta.');
  }
} else {
  console.log('‚úÖ C√≥digo de conexi√≥n reemplazado correctamente');
  fs.writeFileSync(serverPath, updatedServerContent, 'utf8');
}

console.log('üéâ Implementaci√≥n de la soluci√≥n robusta completada!');
console.log(`
La conexi√≥n a PostgreSQL ahora incluye:
- Reintentos autom√°ticos (5 intentos con 5 segundos entre cada uno)
- Modo simulado si la conexi√≥n falla persistentemente
- Datos simulados para mantener la funcionalidad sin BD
- Gesti√≥n de errores mejorada
- Creaci√≥n autom√°tica de tablas

Para ver el resultado en Railway, despliega el servidor actualizado.
`);
