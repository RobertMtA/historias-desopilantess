# Script para configurar PostgreSQL en Railway
# Autor: GitHub Copilot
# Fecha: 25 de agosto de 2025

# Colores para los mensajes
$Green = [System.ConsoleColor]::Green
$Red = [System.ConsoleColor]::Red
$Yellow = [System.ConsoleColor]::Yellow
$Cyan = [System.ConsoleColor]::Cyan

function Write-ColorMessage {
    param (
        [string]$Message,
        [System.ConsoleColor]$Color = [System.ConsoleColor]::White
    )
    
    Write-Host $Message -ForegroundColor $Color
}

# Banner de inicio
Write-ColorMessage "`n==================================================" $Cyan
Write-ColorMessage "üìã CONFIGURACI√ìN DE POSTGRESQL EN RAILWAY" $Cyan
Write-ColorMessage "==================================================" $Cyan
Write-ColorMessage "Este script configura las variables de PostgreSQL" $Cyan
Write-ColorMessage "directamente en Railway para resolver problemas de conexi√≥n." $Cyan
Write-ColorMessage "==================================================" $Cyan

# Verificar conexi√≥n a Railway
Write-ColorMessage "`nüîç Verificando conexi√≥n a Railway..." $Yellow
$railwayStatus = railway whoami 2>&1

if ($LASTEXITCODE -ne 0) {
    Write-ColorMessage "`n‚ö†Ô∏è No est√°s conectado a Railway. Iniciando sesi√≥n..." $Yellow
    railway login
    
    if ($LASTEXITCODE -ne 0) {
        Write-ColorMessage "‚ùå Error al iniciar sesi√≥n en Railway." $Red
        exit 1
    }
    
    # Verificar nuevamente
    $railwayStatus = railway whoami 2>&1
    if ($LASTEXITCODE -ne 0) {
        Write-ColorMessage "‚ùå No se pudo conectar a Railway." $Red
        exit 1
    }
}

Write-ColorMessage "‚úÖ Conectado a Railway como: $railwayStatus" $Green

# Seleccionar proyecto
Write-ColorMessage "`nüìã Seleccionando proyecto en Railway..." $Yellow
railway link

if ($LASTEXITCODE -ne 0) {
    Write-ColorMessage "‚ùå Error al seleccionar proyecto en Railway." $Red
    exit 1
}

Write-ColorMessage "‚úÖ Proyecto seleccionado correctamente" $Green

# Obtener informaci√≥n actual de PostgreSQL
Write-ColorMessage "`nüîç Verificando servicio de PostgreSQL en Railway..." $Yellow
$services = railway service list 2>&1

$postgresService = $services | Select-String -Pattern "postgres"
if (-not $postgresService) {
    Write-ColorMessage "‚ö†Ô∏è No se encontr√≥ un servicio PostgreSQL en tu proyecto." $Yellow
    Write-ColorMessage "¬øDeseas continuar de todos modos? (S/N)" $Yellow
    $continue = Read-Host
    
    if ($continue -ne "S" -and $continue -ne "s") {
        Write-ColorMessage "‚ùå Operaci√≥n cancelada por el usuario." $Red
        exit 0
    }
}

# Solicitar informaci√≥n para las variables
Write-ColorMessage "`nüìã Configurando variables de PostgreSQL en Railway..." $Yellow
Write-ColorMessage "Por favor, ingresa la siguiente informaci√≥n:" $Yellow

# Contrase√±a
Write-ColorMessage "`nContrase√±a de PostgreSQL:" $Yellow
$securePassword = Read-Host -AsSecureString
$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($securePassword)
$pgPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)

# Confirmar informaci√≥n
Write-ColorMessage "`nüìã Resumen de la configuraci√≥n:" $Yellow
Write-ColorMessage "- PGUSER: postgres" $Yellow
Write-ColorMessage "- PGHOST: localhost" $Yellow
Write-ColorMessage "- PGPORT: 5432" $Yellow
Write-ColorMessage "- PGDATABASE: railway" $Yellow
Write-ColorMessage "- PGPASSWORD: ********" $Yellow

Write-ColorMessage "`n¬øConfirmas esta configuraci√≥n? (S/N)" $Yellow
$confirm = Read-Host

if ($confirm -ne "S" -and $confirm -ne "s") {
    Write-ColorMessage "‚ùå Operaci√≥n cancelada por el usuario." $Red
    exit 0
}

# Configurar variables en Railway
Write-ColorMessage "`nüìù Configurando variables en Railway..." $Yellow

# Establecer variables b√°sicas
Write-ColorMessage "Configurando PGUSER=postgres..." $Yellow
railway variables set PGUSER=postgres
if ($LASTEXITCODE -ne 0) {
    Write-ColorMessage "‚ö†Ô∏è No se pudo establecer PGUSER" $Yellow
}

Write-ColorMessage "Configurando PGHOST=localhost..." $Yellow
railway variables set PGHOST=localhost
if ($LASTEXITCODE -ne 0) {
    Write-ColorMessage "‚ö†Ô∏è No se pudo establecer PGHOST" $Yellow
}

Write-ColorMessage "Configurando PGPORT=5432..." $Yellow
railway variables set PGPORT=5432
if ($LASTEXITCODE -ne 0) {
    Write-ColorMessage "‚ö†Ô∏è No se pudo establecer PGPORT" $Yellow
}

Write-ColorMessage "Configurando PGDATABASE=railway..." $Yellow
railway variables set PGDATABASE=railway
if ($LASTEXITCODE -ne 0) {
    Write-ColorMessage "‚ö†Ô∏è No se pudo establecer PGDATABASE" $Yellow
}

# Establecer contrase√±a (evitando caracteres especiales en la l√≠nea de comandos)
Write-ColorMessage "Configurando PGPASSWORD=********..." $Yellow
railway variables set PGPASSWORD="$pgPassword"
if ($LASTEXITCODE -ne 0) {
    Write-ColorMessage "‚ö†Ô∏è No se pudo establecer PGPASSWORD" $Yellow
}

# Configurar DATABASE_URL
Write-ColorMessage "Configurando DATABASE_URL..." $Yellow
$databaseUrl = "postgresql://postgres:$pgPassword@localhost:5432/railway"
railway variables set DATABASE_URL="$databaseUrl"
if ($LASTEXITCODE -ne 0) {
    Write-ColorMessage "‚ö†Ô∏è No se pudo establecer DATABASE_URL" $Yellow
}

# Configurar SSL_MODE para deshabilitar SSL
Write-ColorMessage "Configurando SSL_MODE=disable..." $Yellow
railway variables set SSL_MODE=disable
if ($LASTEXITCODE -ne 0) {
    Write-ColorMessage "‚ö†Ô∏è No se pudo establecer SSL_MODE" $Yellow
}

# Mostrar variables configuradas
Write-ColorMessage "`nüìã Variables configuradas en Railway:" $Green
railway variables

# Configurar el mismo archivo .env localmente
Write-ColorMessage "`nüìù Creando archivo .env local..." $Yellow

$envContent = @"
# Configuraci√≥n de PostgreSQL para Railway
# Generado autom√°ticamente: $(Get-Date -Format "dd-MM-yyyy HH:mm:ss")

# Variables est√°ndar de PostgreSQL
PGUSER=postgres
PGPASSWORD=$pgPassword
PGHOST=localhost
PGPORT=5432
PGDATABASE=railway

# URL de conexi√≥n completa
DATABASE_URL=postgresql://postgres:$pgPassword@localhost:5432/railway

# Configuraci√≥n adicional
NODE_ENV=production
PORT=8080
SSL_MODE=disable
"@

$envContent | Out-File -FilePath ".env" -Encoding utf8 -Force
Write-ColorMessage "‚úÖ Archivo .env creado correctamente" $Green

# Crear archivo de prueba simple
Write-ColorMessage "`nüìù Creando script de prueba simple..." $Yellow

$testContent = @"
/**
 * test-railway-connection.js
 * 
 * Script para probar la conexi√≥n a PostgreSQL en Railway
 * con la nueva configuraci√≥n sin SSL
 */

// Cargar variables de entorno
require('dotenv').config();

const { Client } = require('pg');

// Configuraci√≥n desde variables de entorno
const config = {
  user: process.env.PGUSER,
  password: process.env.PGPASSWORD,
  host: process.env.PGHOST,
  port: parseInt(process.env.PGPORT, 10),
  database: process.env.PGDATABASE,
  // Expl√≠citamente sin SSL
  ssl: false
};

console.log('=== PRUEBA DE CONEXI√ìN A POSTGRESQL EN RAILWAY ===');
console.log('Configuraci√≥n:');
console.log(\`- Host: \${config.host}\`);
console.log(\`- Puerto: \${config.port}\`);
console.log(\`- Base de datos: \${config.database}\`);
console.log(\`- Usuario: \${config.user}\`);
console.log(\`- SSL: desactivado\`);
console.log('\\nIniciando conexi√≥n...');

// Conectar y probar
const client = new Client(config);

client.connect()
  .then(() => {
    console.log('‚úì ¬°Conexi√≥n exitosa!');
    return client.query('SELECT NOW() as time');
  })
  .then(result => {
    console.log(\`‚úì Hora del servidor: \${result.rows[0].time}\`);
    
    // Verificar tablas
    return client.query(\`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    \`);
  })
  .then(result => {
    if (result.rows.length > 0) {
      console.log(\`‚úì Tablas encontradas: \${result.rows.length}\`);
      result.rows.forEach((row, i) => {
        console.log(\`  \${i+1}. \${row.table_name}\`);
      });
    } else {
      console.log('‚ö† No se encontraron tablas en la base de datos');
    }
    
    return client.end();
  })
  .then(() => {
    console.log('‚úì Prueba completada correctamente');
  })
  .catch(err => {
    console.error('‚úó Error de conexi√≥n:', err.message);
  });
"@

$testContent | Out-File -FilePath "test-railway-connection.js" -Encoding utf8 -Force
Write-ColorMessage "‚úÖ Script de prueba creado correctamente" $Green

# Instalar dependencias necesarias
Write-ColorMessage "`nüì• Instalando dependencias necesarias..." $Yellow
npm install pg dotenv --no-save

if ($LASTEXITCODE -ne 0) {
    Write-ColorMessage "‚ö†Ô∏è Hubo un problema al instalar las dependencias" $Yellow
} else {
    Write-ColorMessage "‚úÖ Dependencias instaladas correctamente" $Green
}

# Ejecutar prueba
Write-ColorMessage "`nüöÄ Probando conexi√≥n a PostgreSQL..." $Yellow
node test-railway-connection.js

# Instrucciones finales
Write-ColorMessage "`n==================================================" $Cyan
Write-ColorMessage "‚úÖ CONFIGURACI√ìN COMPLETADA" $Green
Write-ColorMessage "==================================================" $Cyan
Write-ColorMessage "Se ha configurado PostgreSQL sin SSL en Railway." $Cyan
Write-ColorMessage "Ahora deber√≠as poder conectarte sin problemas de SSL." $Cyan
Write-ColorMessage "`nPara usar esta configuraci√≥n en tu aplicaci√≥n:" $Cyan
Write-ColorMessage "1. Usa el archivo .env generado" $Cyan
Write-ColorMessage "2. Configura tu conexi√≥n sin SSL:" $Cyan
Write-ColorMessage "   const pool = new Pool({" $Cyan
Write-ColorMessage "     ssl: false" $Cyan
Write-ColorMessage "   });" $Cyan
Write-ColorMessage "`nPara realizar un nuevo despliegue:" $Cyan
Write-ColorMessage "   railway up" $Cyan
Write-ColorMessage "==================================================" $Cyan

Write-Host "`nPresiona cualquier tecla para finalizar..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
