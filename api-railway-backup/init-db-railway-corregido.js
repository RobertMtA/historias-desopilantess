/**
 * Script para inicializar la base de datos en Railway
 * con 49 historias y 3 comentarios por historia
 */

const { Pool } = require('pg');

// Configuraci√≥n de conexi√≥n
const connectionString = process.env.DATABASE_URL;
console.log('üöÄ Iniciando inicializaci√≥n de tablas en Railway...');
console.log('üìÖ Fecha y hora:', new Date().toISOString());

if (!connectionString) {
  console.error('ERROR: No se encontr√≥ la variable DATABASE_URL');
  process.exit(1);
}

// Configuraci√≥n del pool de conexiones con m√∫ltiples opciones
let pool;

// Intentar diferentes configuraciones de conexi√≥n
try {
  console.log('Intentando conexi√≥n con SSL rejectUnauthorized=false...');
  pool = new Pool({
    connectionString,
    ssl: { rejectUnauthorized: false }
  });
} catch (error) {
  console.log('Error con la configuraci√≥n SSL est√°ndar, intentando sin SSL...');
  pool = new Pool({
    connectionString,
    ssl: false
  });
}

// Lista de nombres para comentarios
const autores = [
  "Juan P√©rez", "Laura Garc√≠a", "Carlos Rodr√≠guez", "Ana Mart√≠nez", 
  "Pedro S√°nchez", "Mar√≠a L√≥pez", "Elena G√≥mez", "David Mu√±oz", 
  "Carmen D√≠az", "Miguel Torres", "Sof√≠a Ruiz", "Alejandro Fern√°ndez", 
  "Luc√≠a Vega", "Javier Moreno", "Isabella Herrera"
];

// Lista de comentarios gen√©ricos
const comentarios = [
  "¬°Me encant√≥ esta historia! Realmente muestra lo absurdo de algunas situaciones cotidianas.",
  "No pod√≠a parar de re√≠r mientras le√≠a esto. ¬°Qu√© situaci√≥n tan graciosa!",
  "Esto me record√≥ a algo similar que me pas√≥ hace a√±os, aunque menos divertido.",
  "El autor tiene un estilo √∫nico para narrar estas an√©cdotas. Muy entretenido.",
  "Estas historias desopilantes son justo lo que necesitaba hoy. Gracias por compartirlas.",
  "Me pregunto si esto realmente sucedi√≥ o es una exageraci√≥n creativa. De cualquier manera, ¬°me encanta!",
  "Voy a compartir esta historia con mis amigos, seguro que tambi√©n les encantar√°.",
  "La forma en que se desarrolla la trama es fant√°stica, con un final inesperado.",
  "Este tipo de an√©cdotas hacen que el d√≠a sea mejor. ¬°Sigan publicando m√°s!",
  "Me gustar√≠a conocer m√°s detalles sobre esta historia. ¬øHabr√° una continuaci√≥n?",
  "La descripci√≥n de los personajes es genial, puedo imaginarlos perfectamente.",
  "Me re√≠ tanto que mi familia vino a ver qu√© estaba pasando. ¬°Historia totalmente compartible!",
  "Creo que el protagonista podr√≠a haber evitado todo esto con un poco m√°s de sentido com√∫n, ¬°pero no ser√≠a tan divertido!",
  "Historias como esta hacen que valga la pena visitar esta web regularmente.",
  "¬°Este sitio se ha convertido en mi fuente diaria de risas! Gracias por tanto."
];

// T√≠tulos de historias desopilantes
const titulos = [
  "El d√≠a que mi GPS me llev√≥ a otro pa√≠s",
  "C√≥mo confund√≠ a mi jefe con el repartidor de pizza",
  "La reuni√≥n virtual donde mi gato se hizo famoso",
  "Cuando el autocorrector me meti√≥ en problemas",
  "La fiesta sorpresa que sali√≥ muy, muy mal",
  "Mi primer d√≠a de trabajo y sus desastres",
  "La confusi√≥n en el aeropuerto internacional",
  "C√≥mo termin√© adoptando tres perros en un d√≠a",
  "La mudanza que se convirti√≥ en pesadilla",
  "Mi experiencia como jurado en un concurso de talentos local",
  "El d√≠a que fui confundido con una celebridad",
  "La cena familiar que termin√≥ en el hospital (pero de risa)",
  "C√≥mo sobreviv√≠ a mi primera clase de yoga",
  "Mi desastrosa cita a ciegas",
  "La vez que me qued√© encerrado en el supermercado"
];

// Funci√≥n para generar una fecha aleatoria en los √∫ltimos 30 d√≠as
function randomDate() {
  const date = new Date();
  date.setDate(date.getDate() - Math.floor(Math.random() * 30));
  return date.toISOString();
}

// Funci√≥n para crear las tablas y agregar datos
async function createTables() {
  console.log('Conectando a la base de datos...');
  const client = await pool.connect();
  
  try {
    console.log('Conexi√≥n establecida. Creando tablas...');
    
    // Iniciar transacci√≥n
    await client.query('BEGIN');
    
    // Crear tabla de historias
    await client.query(`
      CREATE TABLE IF NOT EXISTS historias (
        id SERIAL PRIMARY KEY,
        titulo VARCHAR(255) NOT NULL,
        contenido TEXT NOT NULL,
        autor VARCHAR(100) NOT NULL,
        categoria VARCHAR(50),
        fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        activo BOOLEAN DEFAULT TRUE
      )
    `);
    console.log('Tabla historias creada o ya existente');
    
    // Crear tabla de comentarios
    await client.query(`
      CREATE TABLE IF NOT EXISTS comentarios (
        id SERIAL PRIMARY KEY,
        historia_id INTEGER NOT NULL,
        autor VARCHAR(100) NOT NULL,
        contenido TEXT NOT NULL,
        fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        activo BOOLEAN DEFAULT TRUE,
        CONSTRAINT fk_historia
          FOREIGN KEY(historia_id) 
          REFERENCES historias(id)
          ON DELETE CASCADE
      )
    `);
    console.log('Tabla comentarios creada o ya existente');
    
    // Crear tabla de interacciones
    await client.query(`
      CREATE TABLE IF NOT EXISTS story_interactions (
        id SERIAL PRIMARY KEY,
        historia_id INTEGER NOT NULL UNIQUE,
        likes INTEGER DEFAULT 0,
        views INTEGER DEFAULT 0,
        CONSTRAINT fk_historia_interactions
          FOREIGN KEY(historia_id) 
          REFERENCES historias(id)
          ON DELETE CASCADE
      )
    `);
    console.log('Tabla story_interactions creada o ya existente');
    
    // Limpiar datos existentes
    await client.query('DELETE FROM comentarios');
    await client.query('DELETE FROM historias');
    await client.query('DELETE FROM story_interactions');
    await client.query('ALTER SEQUENCE historias_id_seq RESTART WITH 1');
    await client.query('ALTER SEQUENCE comentarios_id_seq RESTART WITH 1');
    await client.query('ALTER SEQUENCE story_interactions_id_seq RESTART WITH 1');
    console.log('Datos anteriores limpiados correctamente');
    
    // Funci√≥n para generar contenido de historia
    function generarContenidoHistoria(index) {
      const titulo = titulos[index % titulos.length];
      
      const parrafos = [
        `Todo comenz√≥ un d√≠a aparentemente normal. ${titulo.charAt(0).toLowerCase() + titulo.slice(1)} parec√≠a algo imposible, pero me ocurri√≥.`,
        
        `Era un ${['lunes', 'martes', 'mi√©rcoles', 'jueves', 'viernes', 's√°bado', 'domingo'][Math.floor(Math.random() * 7)]} por la ${['ma√±ana', 'tarde', 'noche'][Math.floor(Math.random() * 3)]} cuando decid√≠ ${['salir a caminar', 'visitar a un amigo', 'ir de compras', 'probar algo nuevo', 'resolver un problema'][Math.floor(Math.random() * 5)]}.`,
        
        `Nunca imagin√© que algo tan simple se convertir√≠a en una de las situaciones m√°s hilarantes de mi vida.`,
        
        `La situaci√≥n se complic√≥ cuando ${['apareci√≥ una persona inesperada', 'se cort√≥ la luz', 'comenz√≥ a llover intensamente', 'me di cuenta que hab√≠a olvidado algo importante', 'son√≥ mi tel√©fono con una llamada urgente'][Math.floor(Math.random() * 5)]}.`,
        
        `Lo peor (o lo m√°s gracioso) fue cuando intent√© ${['disimular', 'resolver el problema', 'pedir ayuda', 'escapar de la situaci√≥n', 'explicar lo sucedido'][Math.floor(Math.random() * 5)]} y solo logr√© empeorar todo.`
      ];
      
      return parrafos.join('\n\n');
    }
    
    // Insertar historias con t√≠tulos, contenido y autores
    for (let i = 1; i <= 15; i++) {
      const tituloIndex = (i - 1) % titulos.length;
      const titulo = titulos[tituloIndex];
      const contenido = generarContenidoHistoria(i - 1);
      const autorIndex = Math.floor(Math.random() * autores.length);
      const autor = autores[autorIndex];
      
      // Insertar historia
      await client.query(`
        INSERT INTO historias (id, titulo, contenido, autor, categoria, fecha, activo)
        VALUES ($1, $2, $3, $4, $5, $6, $7)
      `, [i, titulo, contenido, autor, 'Comedia', randomDate(), true]);
      
      // Insertar interacciones
      await client.query(`
        INSERT INTO story_interactions (historia_id, likes, views)
        VALUES ($1, $2, $3)
      `, [i, Math.floor(Math.random() * 50), Math.floor(Math.random() * 200) + 50]);
    }
    
    console.log('Historias insertadas correctamente');
    
    // Generar comentarios para cada historia
    for (let historiaId = 1; historiaId <= 15; historiaId++) {
      // Seleccionar 3 comentarios aleatorios con autores diferentes
      const comentariosSeleccionados = [];
      const autoresUsados = new Set();
      
      // Asegurarnos de que tenemos 3 autores diferentes
      while (comentariosSeleccionados.length < 3) {
        const autorIndex = Math.floor(Math.random() * autores.length);
        const autor = autores[autorIndex];
        
        // Evitar repetir autores
        if (!autoresUsados.has(autor)) {
          const comentarioIndex = Math.floor(Math.random() * comentarios.length);
          const comentario = comentarios[comentarioIndex];
          const fecha = randomDate();
          
          comentariosSeleccionados.push({
            autor,
            contenido: comentario,
            fecha
          });
          
          autoresUsados.add(autor);
        }
      }
      
      // Insertar los comentarios en la base de datos
      for (const comentario of comentariosSeleccionados) {
        await client.query(
          'INSERT INTO comentarios (historia_id, autor, contenido, fecha, activo) VALUES ($1, $2, $3, $4, $5)',
          [historiaId, comentario.autor, comentario.contenido, comentario.fecha, true]
        );
      }
    }
    
    console.log('Comentarios insertados correctamente');
    
    // Confirmar transacci√≥n
    await client.query('COMMIT');
    console.log('Todas las operaciones completadas correctamente');
    
  } catch (error) {
    // Revertir cambios en caso de error
    await client.query('ROLLBACK');
    console.error('Error durante la creaci√≥n de tablas:', error);
    throw error;
  } finally {
    // Liberar cliente
    client.release();
    console.log('Cliente liberado');
  }
}

// Funci√≥n para verificar los comentarios
async function verificarComentarios() {
  console.log('Verificando comentarios...');
  
  const client = await pool.connect();
  
  try {
    // Contar total de historias y comentarios
    const historiasResult = await client.query('SELECT COUNT(*) FROM historias');
    const comentariosResult = await client.query('SELECT COUNT(*) FROM comentarios');
    
    const totalHistorias = parseInt(historiasResult.rows[0].count);
    const totalComentarios = parseInt(comentariosResult.rows[0].count);
    
    console.log(`Resumen final:`);
    console.log(`- Total de historias: ${totalHistorias}`);
    console.log(`- Total de comentarios: ${totalComentarios}`);
    
    // Obtener un ejemplo de los comentarios de la primera historia
    const ejemploComentarios = await client.query('SELECT * FROM comentarios WHERE historia_id = 1');
    
    console.log('\nEjemplo de comentarios para la historia 1:');
    ejemploComentarios.rows.forEach(row => {
      console.log(`- ${row.autor}: "${row.contenido.substring(0, 50)}..."`);
    });
    
  } catch (error) {
    console.error('Error al verificar comentarios:', error);
  } finally {
    client.release();
  }
}

// Funci√≥n principal
async function main() {
  try {
    // Crear las tablas e insertar datos
    await createTables();
    
    // Verificar los comentarios insertados
    await verificarComentarios();
    
    console.log('Proceso de inicializaci√≥n completado con √©xito');
  } catch (error) {
    console.error('Error durante la inicializaci√≥n:', error);
    process.exit(1);
  } finally {
    // Cerrar el pool de conexiones
    await pool.end();
    console.log('Conexi√≥n a la base de datos cerrada');
  }
}

// Ejecutar la funci√≥n principal
main();
