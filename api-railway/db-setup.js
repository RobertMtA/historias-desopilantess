/**
 * Script para crear tablas en PostgreSQL
 * Este archivo se debe incluir en el contenedor y ejecutarse desde all√≠
 */
const { Pool } = require('pg');
const fs = require('fs');

async function initializeDatabase() {
  console.log('ÔøΩ Intentando conectar a PostgreSQL...');
  
  // Configuraci√≥n mejorada para Railway
  const isRailway = process.env.RAILWAY_ENVIRONMENT || process.env.RAILWAY_PROJECT_ID;
  const isProduction = process.env.NODE_ENV === 'production';
  
  console.log('üîç Variables de entorno encontradas:');
  console.log('   DATABASE_URL:', !!process.env.DATABASE_URL);
  console.log('   PGHOST:', process.env.PGHOST);
  console.log('   PGUSER:', process.env.PGUSER);
  console.log('   PGDATABASE:', process.env.PGDATABASE);
  console.log('   RAILWAY_ENVIRONMENT:', process.env.RAILWAY_ENVIRONMENT);
  
  // Crear pool de conexi√≥n con configuraci√≥n mejorada
  const pool = new Pool({
    // Priorizar DATABASE_URL si existe
    ...(process.env.DATABASE_URL ? {
      connectionString: process.env.DATABASE_URL,
    } : process.env.PGHOST ? {
      // Variables individuales
      user: process.env.PGUSER,
      password: process.env.PGPASSWORD || undefined, // Permitir contrase√±a vac√≠a
      host: process.env.PGHOST,
      port: parseInt(process.env.PGPORT || '5432'),
      database: process.env.PGDATABASE
    } : {
      // Fallback (no deber√≠a usarse en Railway)
      connectionString: 'postgresql://postgres:postgres@localhost:5432/historias'
    }),
    // SSL configurado para Railway
    ssl: (isProduction || isRailway) ? { rejectUnauthorized: false } : false
  });
  
  try {
    // Verificar conexi√≥n
    console.log('üîå Verificando conexi√≥n a PostgreSQL...');
    const client = await pool.connect();
    console.log('‚úÖ Conexi√≥n establecida correctamente');
    
    // Crear tablas
    console.log('üì¶ Creando tablas necesarias...');
    
    // Tabla de historias
    await client.query(`
      CREATE TABLE IF NOT EXISTS historias (
        id SERIAL PRIMARY KEY,
        titulo VARCHAR(255) NOT NULL,
        contenido TEXT NOT NULL,
        autor VARCHAR(100),
        categoria VARCHAR(50),
        fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Tabla historias creada');
    
    // Tabla de comentarios
    await client.query(`
      CREATE TABLE IF NOT EXISTS comentarios (
        id SERIAL PRIMARY KEY,
        historia_id INTEGER NOT NULL,
        autor VARCHAR(100) NOT NULL,
        contenido TEXT NOT NULL,
        fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Tabla comentarios creada');
    
    // Tabla de interacciones (likes)
    await client.query(`
      CREATE TABLE IF NOT EXISTS story_interactions (
        id SERIAL PRIMARY KEY,
        historia_id INTEGER NOT NULL UNIQUE,
        likes INTEGER DEFAULT 0,
        views INTEGER DEFAULT 0
      )
    `);
    console.log('‚úÖ Tabla story_interactions creada');
    
    // Verificar si hay datos en la tabla historias
    const result = await client.query('SELECT COUNT(*) FROM historias');
    const count = parseInt(result.rows[0].count);
    
    // Si no hay datos, insertar algunos ejemplos
    if (count === 0) {
      console.log('üìù Insertando datos de ejemplo...');
      
      await client.query(`
        INSERT INTO historias (titulo, contenido, autor, categoria)
        VALUES 
        ('La Aventura Inesperada', 'Era una tarde lluviosa cuando decid√≠ salir a caminar sin paraguas. Lo que parec√≠a ser un error, termin√≥ convirti√©ndose en la mejor decisi√≥n de mi vida...', 'Juan P√©rez', 'Comedia'),
        ('El Misterio del Bosque', 'Nadie sab√≠a qu√© ocurr√≠a en aquel bosque por las noches. Los habitantes del pueblo evitaban acercarse despu√©s del atardecer, hasta que un d√≠a, decid√≠ investigar por mi cuenta...', 'Mar√≠a Garc√≠a', 'Misterio'),
        ('Un D√≠a Cualquiera', 'Lo que parec√≠a un d√≠a normal se convirti√≥ en algo extraordinario cuando al abrir la puerta de mi casa encontr√© un sobre amarillo con mi nombre escrito con una caligraf√≠a perfecta...', 'Carlos Rodr√≠guez', 'Cotidiano')
      `);
      
      console.log('‚úÖ Datos de ejemplo insertados');
    } else {
      console.log(`‚ÑπÔ∏è Ya existen ${count} historias en la base de datos`);
    }
    
    // Crear archivo de estado para indicar que la inicializaci√≥n se complet√≥
    fs.writeFileSync('/app/db-initialized.txt', `Inicializado en: ${new Date().toISOString()}`);
    console.log('‚úÖ Marcador de inicializaci√≥n creado');
    
    client.release();
    console.log('üéâ Inicializaci√≥n completada con √©xito');
    
  } catch (error) {
    console.error('‚ùå Error en la inicializaci√≥n de la base de datos:', error);
    console.error('üîç Detalles del error:');
    console.error('   C√≥digo:', error.code);
    console.error('   Mensaje:', error.message);
    console.error('   Stack:', error.stack);
    throw error; // Re-lanzar el error para que server.js pueda manejarlo
  } finally {
    try {
      await pool.end();
    } catch (closeError) {
      console.error('‚ö†Ô∏è Error al cerrar el pool:', closeError.message);
    }
  }
}

// Ejecutar inicializaci√≥n solo si se llama directamente
if (require.main === module) {
  initializeDatabase()
    .then(() => console.log('‚úÖ Proceso de inicializaci√≥n finalizado'))
    .catch(err => console.error('‚ùå Error general:', err));
} else {
  // Exportar la funci√≥n para usarla en otros m√≥dulos
  module.exports = { initializeDatabase };
}
